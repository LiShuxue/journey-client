name: Continuous Deploy # action名称

on: # 在push代码的时候运行此action
  push:
    branches:
      - main
      - master

jobs:
  my_code_build_deploy: # 代码的打包和部署
    runs-on: ubuntu-latest # 运行环境，最新ubuntu

    strategy:
      matrix:
        node-version: [18.x] # 设置node版本，可以是多个

    steps:
      - name: Use Node.js ${{ matrix.node-version }} # 使用 node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Show version # 查看版本，方便从log信息上确认
        run: node -v && npm -v && npm config set registry https://registry.npmmirror.com

      - name: setEnv # 开启yarn和pnpm，设置源
        run: corepack enable && npm config set registry https://registry.npmmirror.com && yarn config set registry https://registry.npmmirror.com && pnpm config set registry https://registry.npmmirror.com

      - name: Checkout # check out the repository
        uses: actions/checkout@v3 # 这里使用了github官方提供的action,checkout项目到虚拟机上

      - name: Install Dependencies # 安装依赖
        run: pnpm i

      - name: Build # 构建
        run: pnpm build

      - name: remove source map # 删除source map
        run: rm -rf dist/**/*.map

      - name: Clean remote folder # 删除远程的代码
        uses: garygrossgarten/github-action-ssh@release # 使用第三方action 远程执行命令
        with:
          command: rm -rf /root/project/journey/journey-client/dist
          username: root
          host: ${{ secrets.SERVER_IP }}
          privateKey: ${{ secrets.SSH_PRIVATE_KEY}}

      - name: Upload build file to server # 上传dist
        uses: appleboy/scp-action@master # 使用第三方action 上传静态文件到服务器
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'dist'
          target: '/root/project/journey/journey-client'

      # - name: Nginx stop # 先停止 nginx
      #   uses: garygrossgarten/github-action-ssh@release # 使用第三方action 远程执行命令
      #   with:
      #     command: nginx -s stop
      #     username: root
      #     host: ${{ secrets.SERVER_IP }}
      #     privateKey: ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: Nginx start # 启动 nginx
      #   uses: garygrossgarten/github-action-ssh@release # 使用第三方action 远程执行命令
      #   with:
      #     command: nginx -c /root/project/journey/journey-client/nginx/nginx.conf
      #     username: root
      #     host: ${{ secrets.SERVER_IP }}
      #     privateKey: ${{ secrets.SSH_PRIVATE_KEY }}

  my_docker_build_deploy: # docker只是为了启动nginx，docker内部挂载了主机的目录，也就是上面的部署的目录。
    needs: my_code_build_deploy # 等待第一个job执行完

    runs-on: ubuntu-latest # 运行环境，最新ubuntu

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: lishuxue/journey-client:latest

      - name: docker pull image # 服务器拉取最新镜像
        uses: garygrossgarten/github-action-ssh@release # 使用第三方action 远程执行命令
        with:
          command: docker pull lishuxue/journey-client
          username: root
          host: ${{ secrets.SERVER_IP }}
          privateKey: ${{ secrets.SSH_PRIVATE_KEY}}

      - name: docker stop # 停止服务
        uses: garygrossgarten/github-action-ssh@release # 使用第三方action 远程执行命令
        with:
          command: cd /root/project/journey/journey-nginx && docker compose down journey-client
          username: root
          host: ${{ secrets.SERVER_IP }}
          privateKey: ${{ secrets.SSH_PRIVATE_KEY}}

      - name: docker run # 启动服务
        uses: garygrossgarten/github-action-ssh@release # 使用第三方action 远程执行命令
        with:
          command: cd /root/project/journey/journey-nginx && docker compose up -d journey-client
          username: root
          host: ${{ secrets.SERVER_IP }}
          privateKey: ${{ secrets.SSH_PRIVATE_KEY}}
